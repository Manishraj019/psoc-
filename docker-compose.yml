version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: photo-marathon-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: photo-marathon
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - photo-marathon-network

  # Redis for queues (optional)
  redis:
    image: redis:7-alpine
    container_name: photo-marathon-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - photo-marathon-network

  # Backend API
  backend:
    build: ./backend
    container_name: photo-marathon-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      MONGO_URI: mongodb://admin:password123@mongodb:27017/photo-marathon?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRY: 7d
      CORS_ORIGIN: http://localhost:3000
      UPLOADS_DIR: /app/uploads
      MAX_UPLOAD_SIZE_MB: 10
      AUTO_APPROVAL_THRESHOLD: 75
      OPENCV_METHOD: orb
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
    ports:
      - "4000:4000"
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - photo-marathon-network

  # Frontend
  frontend:
    build: ./frontend
    container_name: photo-marathon-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - photo-marathon-network

volumes:
  mongodb_data:
  redis_data:
  uploads_data:

networks:
  photo-marathon-network:
    driver: bridge
